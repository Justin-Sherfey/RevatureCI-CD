Yaosen Lin
Sung Jun Kim
Justin Sherfey

Alarm - For the alarm implementation we used a priority queue to store Sleep Threads, which was an object
we defined to encapsulate a KThread and wakeTime. In our timerInterrupt we made sure that SleepQueue
was not empty and that the machine timer had not hit its reset threshold yet. If it had, then we forced
an interrupt. For waitUntil we made sure that the x parameter was not 0 or negative, then we initialized
a new Sleep Thread with the current thread and the wakeTime, which was updated with the minimum number of
clock ticks to wait. To test this we created a list of different durations and verified that the thread 
approximately waited for its time set. We also tested the base case and made sure that the thread did not wait,
in which they all passed. Our results ran good, while it was not the exact wait time, the thread waited almost
perfect. 

Join - For the join implentation in KThreads, we first initialized a KThread called joinThread to null.
We made sure that the current status of the thread was not finished, then making sure that joinThread was
not yet initialized, so that we could have joinThread become the current thread, putting the thread back
to sleep and restoring interrupts. This makes sure that if A was already finished, then B would return
immediately. If A was not finished, then B would wait inside of join until A finished then resume B. 
To accomplish this we changed runThread to pause the machine if joinThread was not null and ready it up,
then setting it null, resuming the process. To test this we would create a child and make sure that the child
finished before we called join, in which child1 should be fully finished, which it was. We also
created multiple child situations which forked and made sure that they finished after joining. In 
these cases we assured that B does not block and waits for A to finish executing if B calls join on A
and that one thread can join with multiple other threads in succession. 


Condition - 


Condition2 -



Rendezvous - 
